openapi: 3.0.0
info:
  title: Forage Payments API
  description: |
    The Forage Payments API is organized around REST. It's primary function is to facilitate 2 primary workflows:

    1. To setup payment methods
      The primary objective here is to tokenize the payment methods for single or future usage. It supports credit and EBT cards as a form of payment.

    2. Execute order payments
      The primary objective here is to capture payments for a single order. Every action taken here is validated against standards set by the USDA FNS.

  contact:
    name: API Support
    email: victor@joinforage.co
  version: 1.0.0
servers:
  - url: https://{environment}.joinforage.com/v1
    variables:
      environment:
        default: api # production
        enum:
          - api # Production server (live data)
          - sandbox.api # Sandbox server (test data)
          - dev.api # Development server (dev version)
security:
  - BearerAuth: []
paths:
  /orders:
    get:
      tags:
        - Orders
      description: Returns a list of Orders
      operationId: Get all orders
      responses:
        '200':
          description: A list of Orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '402':
          $ref: '#/components/responses/Error402'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
    post:
      tags:
        - Orders
      summary: Create an order
      description: Create an Order
      operationId: Create order
      requestBody:
        $ref: '#/components/requestBodies/Order'
      responses:
        '200':
          $ref: '#/components/responses/Order200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '402':
          $ref: '#/components/responses/Error402'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
  /orders/{id}:
    parameters:
      - name: id
        in: path
        description: The Order's unique identifier
        required: true
        schema:
          type: string
    get:
      tags:
        - Orders
      summary: Get order by id
      description: Returns an existing Order. Supply its unique identifier.
      operationId: Get order
      responses:
        '200':
          $ref: '#/components/responses/Order200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '402':
          $ref: '#/components/responses/Error402'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
    post:
      tags:
        - Orders
      summary: Update order by id
      description: Updates properties for an existing Order.
      operationId: Update order
      requestBody:
        $ref: '#/components/requestBodies/Order'
      responses:
        '200':
          $ref: '#/components/responses/Order200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '402':
          $ref: '#/components/responses/Error402'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
  /payment_methods:
    post:
      tags:
        - Payment Methods
      summary: Create a payment method for single or repeated use.
      description: |
        This endpoint will return a tokenized payment method. The PaymentMethod object will be stripped of sensitive cardholder data. Use the object's ID as a token that references the payment instrument. You will need to store the token on your platform and map it to the customer's account.

        Tokens are useful because they allow you to reference a payment instrument without storing or transmitting sensitive cardholder data.

      operationId: Create payment method
      requestBody:
        $ref: '#/components/requestBodies/PaymentMethod'
      responses:
        '200':
          $ref: '#/components/responses/PaymentMethod200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '402':
          $ref: '#/components/responses/Error402'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
  /payment_methods/{id}:
    parameters:
      - name: id
        in: path
        description: The PaymentMethod's unique identifier
        required: true
        schema:
          type: string
    get:
      tags:
        - Payment Methods
      summary: Get a payment method by id.
      description: Returns an existing PaymentMethod. Supply its unique identifier.
      operationId: Get payment method
      responses:
        '200':
          $ref: '#/components/responses/PaymentMethod200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '402':
          $ref: '#/components/responses/Error402'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
    post:
      tags:
        - Payment Methods
      summary: Update a payment method by id.
      description: Updates an existing PaymentMethod. Supply its unique identifier.
      operationId: Update payment method
      requestBody:
        $ref: '#/components/requestBodies/PaymentMethod'
      responses:
        '200':
          $ref: '#/components/responses/PaymentMethod200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '402':
          $ref: '#/components/responses/Error402'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
  /payments:
    get:
      tags:
        - Payments
      summary: Get all payments.
      description: Returns a list of existing payments.
      operationId: Get all payments
      responses:
        '200':
          description: Successfuly returns a list of Payments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '402':
          $ref: '#/components/responses/Error402'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
  /payments/{id}:
    parameters:
      - name: id
        in: path
        description: The Payment's unique identifier
        required: true
        schema:
          type: string
    get:
      tags:
        - Payments
      summary: Get a payment by id.
      description: Returns an existing payment.
      operationId: Get a payment
      responses:
        '200':
          description: Returns an existing PaymentObject. Supply its unique identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '402':
          $ref: '#/components/responses/Error402'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
  /refunds:
    get:
      tags:
        - Refunds
      summary: Get all refunds.
      description: Returns a list of Refunds
      operationId: Get all refunds
      responses:
        '200':
          description: A list of Refunds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RefundResponse'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '402':
          $ref: '#/components/responses/Error402'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
    post:
      tags:
        - Refunds
      summary: Create a refund.
      description: Create an Refund
      operationId: Create a refund
      requestBody:
        $ref: '#/components/requestBodies/Refund'
      responses:
        '200':
          $ref: '#/components/responses/Refund200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '402':
          $ref: '#/components/responses/Error402'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
  /refunds/{id}:
    parameters:
      - name: id
        in: path
        description: The Refund's unique identifier
        required: true
        schema:
          type: string
    get:
      tags:
        - Refunds
      summary: Get a refund by id.
      description: Returns an existing Refund. Supply its unique identifier.
      operationId: Get a refund by id.
      responses:
        '200':
          $ref: '#/components/responses/Refund200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '402':
          $ref: '#/components/responses/Error402'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
    post:
      tags:
        - Refunds
      summary: Update a refund by id.
      description: Updates properties for an existing Refund.
      operationId: Update a refund
      requestBody:
        $ref: '#/components/requestBodies/Refund'
      responses:
        '200':
          $ref: '#/components/responses/Refund200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '402':
          $ref: '#/components/responses/Error402'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
components:
  schemas:
    Error:
      type: object
      properties:
        type:
          type: string
          enum:
            - api_connection_error # Failture to connect to Forage's API
            - api_error # API errors cover any other type of problem (e.g. temporary problem with servers) and are rare
            - authentication_error # Failure to properly authenticate yourself in the request
            - card_error # Most common error. They result when the user enters a card that can't be charged
            - invalid_request_error # Arises when a request has invalid parameters
            - rate_limit_error # too many requests hit the api too quikcly
            - validation_error # errors triggered by client when failing to validate fields (e.g. card number or expiration date is invalid or incomplete)
        code:
          type: string
          description: A short string that represents the error. Use these codes to gracefully and programmatically handle exceptions.
          enum:
            - address_incorrect
            - api_key_expired
            - authentication_required
            - balance_insufficient
            - amount_unauthorized
            - card_declined
            - card_decline_rate_limit_exceeded
            - card_expired
            - card_incorrect_cvc
            - card_incorrect_address
            - card_incorrect_number
            - card_incorrect_zip
            - card_invalid_expiry_month
            - card_invalid_expiry_year
            - payment_already_captured
            - payment_already_refunded
            - payment_invalid_parameter
            - payment_invalid_status_update
            - payment_invalid_amount
        decline_code:
          type: string
          description: For card errors resulting from a card issuer decline.
        message:
          type: string
          description: A human-readable message that provides more details about the error.
        source:
          type: object
          description: If the request involves a forage object, then this is populated with that object. For example, in the case of an order payment failure, it will contain the order object.
    ErrorResponse:
      type: object
      description: This object contains information the client needs to understand why a 4xx error occurred.
      properties:
        path:
          type: string
          description: The URI that identifies the specific occurence of the error. e.g. /orders/2343jdjdi3
        errors:
          type: array
          description: An list of associated errors
          items:
            $ref: '#/components/schemas/Error'
    OrderRequest:
      type: object
      description: |
        This object represent a single customer order. Use this abstraction to manage an order throughout its lifecycle, especially when using split tender. This will ensure that the order's payment adheres to USDA FNS guidelines.
      properties:
        amounts:
          type: object
          description: This object represents the dollar amounts associated with the order.
          properties:
            ebt:
              type: number
              format: currency
              description: The portion that can be paid with an EBT card.
            other:
              type: number
              format: currency
              description: The portion that can be paid with any other payment method.
            total:
              type: number
              format: currency
              description: The total amount owed by the customer.
        payment_requests:
          type: array
          description: A list of payment requests to pay down the order's total amount.
          items:
            type: object
            properties:
              amount:
                type: number
                format: currency
              payment_method:
                description: A payment method or reference to payment method.
                oneOf:
                  - $ref: '#/components/schemas/EBTPaymentMethod'
                  - $ref: '#/components/schemas/NonEBTPaymentMethod'
                  - type: string
                    description: ID of existing payment method.
    OrderResponse:
      allOf:
        - $ref: '#/components/schemas/OrderRequest'
        - type: object
          properties:
            id:
              type: string
              description: unique identifier for the order
            status:
              type: string
              enum:
                - requires_payment_method # order requires a payment method(s)
                  # TODO this one is interesting because I can think of multiple reasons for this status:
                  # 1. its missing the adequate number of payment methods to pay down the amount
                  # 2. one of the payment methods failed to exercise a successful payment
                - requires_pin # ebt payment method requires successful pin entry
                - requires_confirmation # Order is ready to be processed.
                - canceled # order has been cancelled
                - succeeded # all attached payment attempts have succeeded
            payments:
              type: array
              description: References all the Payment objects used to pay for this order.
              items:
                type: string
                description: Payment id
            payment_methods:
              type: array
              description: References all the PaymentMethod objects used to pay for this order.
              items:
                type: string
                description: PaymentMethod id
    Balance:
      type: object
      description: This object represents an EBT cardholder's account balance.
      properties:
        amount:
          type: string
          format: currency
          description: The balance left on account.
    Payment:
      type: object
      description: This object represents a single payment. It is associated with a single payment method.
      properties:
        id:
          type: string
          description: A unique identifier.
        amount:
          type: number
          format: currency
          description: The amount to be charged.
        description:
          type: string
          description: A description of the payment.
        metadata:
          type: object
          description: A key:value store for custom data associated with the Payment instance.
        payment_method:
          type: string
          description: A reference to a PaymentMethod instance.
        status:
          type: string
          description: |
            The lifecycle of a payment relies on asynchronous processes. This property describes its state in the lifecycle.

            Possible values:

            - requires_payment_method : It is missing a valid payment method. Either it is missing a payment method reference or the referenced one is not valid.
            - requires_confirmation : The payment has not been submitted for processing.
            - requires_pin : This payment requires the customer to authorize it via pin entry. This is relevant for EBT payments.
            - processing : This payment has been submitted for processing.
            - canceled : This payment has been cancelled. This payment cannot be used for future payment attempts.
            - succeded : The payment has been successfully processed and is complete. This payment cannot be changed.

          enum:
            - requires_payment_method
            - requires_confirmation
            - requires_pin
            - processing
            - canceled
            - succeded
        next_action:
          type: object
          description: |
            Sometimes a specific action needs to take place for a payment to reach the next step in its lifecycle. For example, a pin entry action is required to authorize an EBT payment. This property tells you what actions you need to take.
          properties:
            type:
              type: string
              description: The type of action that needs to take place.
              enum:
                - redirect_to_url
            redirect_to_url:
              type: object
              description: Instructions for authorizing a payment by redirecting your customer to another page.
              properties:
                url:
                  type: string
                  format: url
                  description: The URL you must redirect your customer to in order to authorize the payment. In the context of EBT, it is the pin entry pad page.
                return_url:
                  type: string
                  format: url
                  description: The URL the customer will be redirected to after completion.
        created:
          type: string
          format: date-time
          description: The date-time this object was created.
        last_modified:
          type: string
          format: date-time
          description: The date-time this object was last modified.
    BillingDetails:
      type: object
      description: This is the billing information associated with the payment method. These are normally required to process payments on this instrument.
      properties:
        address:
          type: object
          description: The address that is associated with the payment method account.
          properties:
            city:
              type: string
              description: City, district, suburb, town, or village.
            country:
              type: string
              description: 2-letter country code. Currently only supports "US".
              enum:
                - US
            line1:
              type: string
              description: Address line 1 (e.g. number and street name).
            line2:
              type: string
              description: Address line 2 (e.g. apartment, suite, or unit).
            postal_code:
              type: string
              description: Zip or Postal Code (e.g. 92109).
            state:
              type: string
              description: State abbreviation (e.g. CA).
        name:
          type: string
          description: Full name.
        email:
          type: string
          description: Email address.
        phone:
          type: string
          description: Billing phone number (including extension).
    BaseCard:
      type: object
      description: Base representation for all card details.
      properties:
        name:
          type: string
          description: The name on the card.
        number:
          type: string
          description: The card number without any separators.
        last_4:
          type: string
          description: The last four digits of the card.
      example:
        name: "Jane John Doe"
        number: "1234567890123456"
        last_4: "3456"
    NonEBTCard:
      allOf:
        - $ref: '#/components/schemas/BaseCard'
        - type: object
          description: Non-EBT card details (e.g. credit, debit, and prepaid).
          properties:
            brand:
              type: string
              description: Card brand
              enum:
                - amex
                - discover
                - mastercard
                - visa
            exp_month:
              type: number
              description: The expiration month listed on the card (e.g. 4). Not relevant to ebt types.
            exp_year:
              type: number
              description: The expiration year listed on the card (e.g. 21). Not relevant to ebt types.
            cvc:
              type: string
              description: The card security code. Not relevant to ebt types.
    PaymentMethod:
      type: object
      description: |
        This object represents a customer's payment instrument. A PaymentMethod is used to pay down an Order's owed amount. They are either single use or reusable. Single usage means they can only be used with one Order.
      properties:
        id:
          type: string
          description: The payment methods unique identifier.
        type:
          type: string
          description: The payment method's card type.
          enum:
            - ebt
            - credit
            - debit
            - prepaid
        reusable:
          type: boolean
          description: Whether the payment method can be reused or only for a single transaction.
        billing_details:
          $ref: '#/components/schemas/BillingDetails'
        created:
          type: string
          format: date-time
    EBTPaymentMethod:
      description: Extends PaymentMethod to be EBT compatible.
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          properties:
            card:
              $ref: '#/components/schemas/BaseCard'
    NonEBTPaymentMethod:
      description: Extends PaymentMethod to be non-EBT compatible (i.e. credit, debit, prepaid).
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          properties:
            card:
              $ref: '#/components/schemas/NonEBTCard'
    TokenizedPaymentMethod:
      description: |
        This object represents a customer's payment instrument. It has been tokenized by the server. It does not include all details about the payment method.
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          properties:
            card:
              type: object
              properties:
                brand:
                  type: string
                  description: non-ebt only
                exp_month:
                  type: number
                  description: non-ebt only.
                exp_year:
                  type: number
                  description: non-ebt only.
                name:
                  type: string
                  description: ebt & non-ebt.
                last_4:
                  type: string
                  description: ebt & non-ebt.
    RefundRequest:
      type: object
      description: This object represents a payment refund. It is associated with a previously created Payment object. Funds will be refunded to the PaymentMethod originally charged.
      properties:
        id:
          type: string
          description: The object's unique identifier.
        amount:
          type: number
          format: currency
          description: The refund's amount.
        payment:
          type: string
          description: The ID of the associated payment to refund.
        description:
          type: string
          description: A description of the refund
        metadata:
          type: object
          description: A key:value store for custom data associated with the Refund instance.
    RefundResponse:
      allOf:
        - $ref: '#/components/schemas/RefundRequest'
        - type: object
          properties:
            status:
              type: string
              description: |
                The lifecycle of a refund relies on asynchronous processes. This property describes its current state.
              enum:
                - pending
                - succeeded
                - failed
  requestBodies:
    Order:
      description: An order to add or update to the system.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderRequest'
    PaymentMethod:
      description: A PaymentMethod to add to or update on the system.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/EBTPaymentMethod'
              - $ref: '#/components/schemas/NonEBTPaymentMethod'
    Refund:
      description: A Refund to add to or update on the system.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RefundRequest'
  responses:
    PaymentMethod200:
      description: Successful payment method resource request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizedPaymentMethod'
    Refund200:
      description: Successfully updated the Refund
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RefundResponse'
    Order200:
      description: Successful order request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderResponse'
    Error400:
      description: __Bad Request__ The request was not accepted, because of errors in the request body. This often occurs due to a missing parameter.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error401:
      description: __Unauthorized__ Missing valid API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error402:
      description: __Request Failed__ The request failed even though the parameters are valid. This often occurs due to a payment decline.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error403:
      description: __Forbidden__ The API key lacks permissions to perform the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error404:
      description: __Not Found__ The requested resource does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error429:
      description: __Limit Reached__ Request limit reached.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error500:
      description: __Server Errors__ Something went wrong on Forage's servers. Try again.
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
